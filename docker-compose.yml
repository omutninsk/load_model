version: "3"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    networks:
      - test_network
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
    restart: on-failure
    environment:
      - cluster.name=jaeger-cluster
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - esdata:/usr/share/elasticsearch/data

  jaeger-collector:
    image: jaegertracing/jaeger-collector
    ports:
      - "14269:14269"
      - "14268:14268"
      - "14267:14267"
      - "14250:14250"
      - "9411:9411"
    networks:
      - test_network
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--es.num-shards=1",
      "--es.num-replicas=0",
      "--log-level=error"
    ]
    depends_on:
      - elasticsearch

  jaeger-agent:
    image: jaegertracing/jaeger-agent
    hostname: jaeger-agent
    command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
    networks:
      - test_network
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    depends_on:
      - jaeger-collector

  jaeger-query:
    image: jaegertracing/jaeger-query
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - no_proxy=localhost
    ports:
      - "16686:16686"
      - "16687:16687"
    networks:
      - test_network
    restart: on-failure
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--span-storage.type=elasticsearch",
      "--log-level=debug"
    ]
    depends_on:
      - jaeger-agent


  db:
    restart: always
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - /var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - test_network

  mq:
    image: rabbitmq:3-management
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - test_network

  # request_generator:
  #   ports:
  #     - 5000:5000
  #   environment:
  #     - SERVICE_NAME=request_generator
  #   links:
  #    - jaeger-agent
  #    - mq
  #   networks:
  #     - test_network
  tasks:
    build: ./request_generator
    links:
      - mq
    environment:
      - SERVICE_NAME=request_generator
      - CELERY_BROKER=amqp://guest:guest@mq:5672
      - CELEERY_BACKEND=rpc://guest:guest@mq:5672
    command: ["tasks"]
    networks:
      - test_network
  flower:
    build: ./request_generator
    ports:
      - 5555:5555
    links:
      - mq
    environment:
      - SERVICE_NAME=request_generator
      - CELERY_BROKER=pyamqp://guest:guest@mq:5672
      - CELEERY_BACKEND=rpc://guest:guest@mq:5672
    command: ["flower"]
    networks:
      - test_network
  microservice1:
    build: ./microservice
    ports:
      - 5011:5011
    command: ["app1"]
    restart: on-failure
    environment:
      - SERVICE_NAME=microservice1
      - SERVICE_PORT=5011
      - AGENT_HOST_NAME=jaeger-agent
    links:
      - jaeger-agent
    networks:
      - test_network

  microservice2:
    build: ./microservice
    ports:
      - 5012:5012
    command: ["app2"]
    restart: on-failure
    environment:
      - SERVICE_NAME=microservice2
      - SERVICE_PORT=5012
      - AGENT_HOST_NAME=jaeger-agent
    links:
      - jaeger-agent
    networks:
      - test_network

volumes:
  esdata:
    driver: local

networks:
  test_network:
    driver: bridge
  